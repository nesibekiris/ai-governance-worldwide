'use client'

import { useState, useRef, useCallback } from 'react'
import Map, { Source, Layer, Popup } from 'react-map-gl'
import { motion } from 'framer-motion'
import { Info, ZoomIn, ZoomOut, Globe } from 'lucide-react'
import { Button } from '@/components/ui/button'
import Link from 'next/link'
import 'mapbox-gl/dist/mapbox-gl.css'

interface MapCountry {
  id: string
  name: string
  flag: string
  coordinates: [number, number]
  score: {
    overall: number
    regulatoryReadiness: number
    innovation: number
  }
  approach: string
  policy: {
    key: string
    enforcement: {
      active: boolean
    }
  }
  investment: {
    total: number
  }
}

interface InteractiveMapProps {
  data: MapCountry[]
}

const MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_TOKEN || 'your-mapbox-token'

export function InteractiveMap({ data }: InteractiveMapProps) {
  const mapRef = useRef<any>(null)
  const [viewState, setViewState] = useState({
    longitude: 0,
    latitude: 20,
    zoom: 2,
    pitch: 0,
    bearing: 0
  })
  const [selectedCountry, setSelectedCountry] = useState<MapCountry | null>(null)
  const [filter, setFilter] = useState<'all' | 'enforcement' | 'high-score'>('all')

  const filteredData = data.filter(country => {
    if (filter === 'enforcement') return country.policy.enforcement.active
    if (filter === 'high-score') return country.score.overall >= 80
    return true
  })

  const getMarkerColor = (country: MapCountry) => {
    if (country.policy.enforcement.active) return '#ef4444' // red for active enforcement
    if (country.score.overall >= 80) return '#10b981' // green for high score
    if (country.score.overall >= 70) return '#3b82f6' // blue for medium score
    return '#f59e0b' // amber for lower score
  }

  const getMarkerSize = (investment: number) => {
    if (investment > 100e9) return 40
    if (investment > 50e9) return 30
    if (investment > 10e9) return 20
    return 15
  }

  const handleReset = () => {
    mapRef.current?.flyTo({
      center: [0, 20],
      zoom: 2,
      duration: 1000
    })
  }

  const geoJsonData = {
    type: 'FeatureCollection' as const,
    features: filteredData.map(country => ({
      type: 'Feature' as const,
      geometry: {
        type: 'Point' as const,
        coordinates: country.coordinates
      },
      properties: {
        id: country.id,
        name: country.name,
        flag: country.flag,
        score: country.score.overall,
        color: getMarkerColor(country),
        size: getMarkerSize(country.investment.total)
      }
    }))
  }

  return (
    <div className="relative h-[600px] w-full overflow-hidden rounded-xl">
      <Map
        ref={mapRef}
        {...viewState}
        onMove={evt => setViewState(evt.viewState)}
        mapboxAccessToken={MAPBOX_TOKEN}
        mapStyle="mapbox://styles/mapbox/dark-v11"
        interactiveLayerIds={['country-points']}
        onClick={(event) => {
          const feature = event.features?.[0]
          if (feature) {
            const country = data.find(c => c.id === feature.properties?.id)
            setSelectedCountry(country || null)
          }
        }}
        onMouseEnter={() => mapRef.current?.getCanvas().style.cursor = 'pointer'}
        onMouseLeave={() => mapRef.current?.getCanvas().style.cursor = ''}
      >
        <Source id="countries" type="geojson" data={geoJsonData}>
          <Layer
            id="country-points"
            type="circle"
            paint={{
              'circle-radius': ['get', 'size'],
              'circle-color': ['get', 'color'],
              'circle-stroke-color': '#ffffff',
              'circle-stroke-width': 2,
              'circle-opacity': 0.8,
              'circle-blur': 0.3
            }}
          />
          <Layer
            id="country-labels"
            type="symbol"
            layout={{
              'text-field': ['get', 'flag'],
              'text-size': 20,
              'text-offset': [0, -2]
            }}
          />
        </Source>

        {selectedCountry && (
          <Popup
            longitude={selectedCountry.coordinates[0]}
            latitude={selectedCountry.coordinates[1]}
            onClose={() => setSelectedCountry(null)}
            closeButton={true}
            closeOnClick={false}
            anchor="bottom"
            maxWidth="300px"
          >
            <div className="p-2">
              <div className="mb-2 flex items-center gap-2">
                <span className="text-2xl">{selectedCountry.flag}</span>
                <h3 className="text-lg font-bold">{selectedCountry.name}</h3>
              </div>
              
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Overall Score:</span>
                  <span className="font-semibold">{selectedCountry.score.overall}/100</span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600">Approach:</span>
                  <span className="capitalize">{selectedCountry.approach}</span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600">Investment:</span>
                  <span className="font-semibold">
                    ${(selectedCountry.investment.total / 1e9).toFixed(0)}B
                  </span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600">Enforcement:</span>
                  <span className={selectedCountry.policy.enforcement.active ? 'text-red-600' : 'text-gray-400'}>
                    {selectedCountry.policy.enforcement.active ? 'Active' : 'Inactive'}
                  </span>
                </div>
              </div>
              
              <Link
                href={`/country/${selectedCountry.id}`}
                className="mt-3 inline-flex w-full items-center justify-center rounded-md bg-blue-600 px-3 py-2 text-sm font-medium text-white hover:bg-blue-700"
              >
                View Details
              </Link>
            </div>
          </Popup>
        )}
      </Map>

      {/* Map Controls */}
      <div className="absolute left-4 top-4 flex flex-col gap-2">
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          className="flex flex-col gap-2 rounded-lg bg-white/90 p-2 shadow-lg backdrop-blur-sm dark:bg-gray-800/90"
        >
          <Button
            size="sm"
            variant={filter === 'all' ? 'default' : 'outline'}
            onClick={() => setFilter('all')}
          >
            All Countries
          </Button>
          <Button
            size="sm"
            variant={filter === 'enforcement' ? 'default' : 'outline'}
            onClick={() => setFilter('enforcement')}
          >
            Active Enforcement
          </Button>
          <Button
            size="sm"
            variant={filter === 'high-score' ? 'default' : 'outline'}
            onClick={() => setFilter('high-score')}
          >
            High Score (80+)
          </Button>
        </motion.div>
      </div>

      {/* Zoom Controls */}
      <div className="absolute right-4 top-4 flex flex-col gap-2">
        <Button
          size="icon"
          variant="secondary"
          onClick={() => mapRef.current?.zoomIn()}
          className="h-10 w-10 rounded-lg bg-white/90 shadow-lg backdrop-blur-sm dark:bg-gray-800/90"
        >
          <ZoomIn className="h-4 w-4" />
        </Button>
        <Button
          size="icon"
          variant="secondary"
          onClick={() => mapRef.current?.zoomOut()}
          className="h-10 w-10 rounded-lg bg-white/90 shadow-lg backdrop-blur-sm dark:bg-gray-800/90"
        >
          <ZoomOut className="h-4 w-4" />
        </Button>
        <Button
          size="icon"
          variant="secondary"
          onClick={handleReset}
          className="h-10 w-10 rounded-lg bg-white/90 shadow-lg backdrop-blur-sm dark:bg-gray-800/90"
        >
          <Globe className="h-4 w-4" />
        </Button>
      </div>

      {/* Legend */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="absolute bottom-4 left-4 rounded-lg bg-white/90 p-4 shadow-lg backdrop-blur-sm dark:bg-gray-800/90"
      >
        <h4 className="mb-2 flex items-center gap-2 text-sm font-semibold">
          <Info className="h-4 w-4" />
          Map Legend
        </h4>
        <div className="space-y-1 text-xs">
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-red-500"></div>
            <span>Active Enforcement</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-green-500"></div>
            <span>High Score (80+)</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-blue-500"></div>
            <span>Medium Score (70-79)</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-amber-500"></div>
            <span>Lower Score (&lt;70)</span>
          </div>
        </div>
        <div className="mt-2 border-t pt-2 text-xs text-gray-600 dark:text-gray-400">
          Circle size = Investment scale
        </div>
      </motion.div>

      {/* Stats Summary */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="absolute right-4 bottom-4 rounded-lg bg-white/90 p-4 shadow-lg backdrop-blur-sm dark:bg-gray-800/90"
      >
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <div className="text-xs text-gray-600 dark:text-gray-400">Countries</div>
            <div className="text-xl font-bold">{filteredData.length}</div>
          </div>
          <div>
            <div className="text-xs text-gray-600 dark:text-gray-400">Total Investment</div>
            <div className="text-xl font-bold">
              ${(filteredData.reduce((sum, c) => sum + c.investment.total, 0) / 1e12).toFixed(1)}T
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  )
}
